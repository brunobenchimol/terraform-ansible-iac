- name: Make sure we have valid version set for PGDG
  ansible.builtin.assert:
    that: 
      - postgresql_version in acceptable_versions
    fail_msg: "postgresql_version must be in {{ acceptable_versions }}"

- name: Install PGDG Postgresql Repo for RHEL 7
  yum:
    name: https://download.postgresql.org/pub/repos/yum/reporpms/EL-7-x86_64/pgdg-redhat-repo-latest.noarch.rpm
    state: present
  when: ansible_facts['distribution_major_version'] == '7'

- name: Install PGDG Postgresql Repo for RHEL 8
  ansible.builtin.dnf:
    name: https://download.postgresql.org/pub/repos/yum/reporpms/EL-8-x86_64/pgdg-redhat-repo-latest.noarch.rpm
    state: present
  when: ansible_facts['distribution_major_version'] == '8'

# until dnf support disabling modules
- name: Disable built-in Postgresql module from AppStream/BaseOS
  command: 
    cmd: "/usr/bin/dnf -qy module disable postgresql"
    # [WARNING]: Consider using the dnf module rather than running 'dnf'.  If you need to use command because dnf is insufficient you can add 'warn: false' to this command task.
    warn: false
  when: ansible_facts['distribution_major_version'] == '8'

- name: Install PGDG Postgresql {{ postgresql_version }} Server   
  ansible.builtin.package:
    name: postgresql{{ postgresql_version}}-server
    state: present

- name: Make sure filesystem has correct permissions to user 'postgres'
  ansible.builtin.file:
    path: /var/lib/pgsql
    owner: postgres
    group: postgres
    state: directory
    recurse: yes

- name: PGDG - Initialize PostgreSQL Database
  command: 
    cmd: "/usr/bin/postgresql-{{ postgresql_version}}-setup initdb"
    creates: /var/lib/pgsql/{{ postgresql_version}}/data/postgresql.conf

- name: PGDG - Make sure database is running
  ansible.builtin.systemd:
    state: started
    name: postgresql-{{ postgresql_version}}
    enabled: yes

- name: PGDG - Enable service postgresql and ensure it is not masked
  ansible.builtin.systemd:
    name: postgresql-{{ postgresql_version}}
    enabled: yes
    masked: no
