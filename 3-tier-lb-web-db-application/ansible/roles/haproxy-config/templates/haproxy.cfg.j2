#---------------------------------------------------------------------
# Example configuration for a possible web application.  See the
# full configuration options online.
#
#   https://www.haproxy.org/download/1.8/doc/configuration.txt
#
#---------------------------------------------------------------------

#---------------------------------------------------------------------
# Global settings
#---------------------------------------------------------------------
global
    # to have these messages end up in /var/log/haproxy.log you will
    # need to:
    #
    # 1) configure syslog to accept network log events.  This is done
    #    by adding the '-r' option to the SYSLOGD_OPTIONS in
    #    /etc/sysconfig/syslog
    #
    # 2) configure local2 events to go to the /var/log/haproxy.log
    #   file. A line like the following can be added to
    #   /etc/sysconfig/syslog
    #
    #    local2.*                       /var/log/haproxy.log
    #
    log         127.0.0.1 local2

    chroot      /var/lib/haproxy
    pidfile     /var/run/haproxy.pid
    maxconn     4000
    user        haproxy
    group       haproxy
    daemon

    # turn on stats unix socket
    stats socket /var/lib/haproxy/stats

    # utilize system-wide crypto-policies
    ssl-default-bind-ciphers PROFILE=SYSTEM
    ssl-default-server-ciphers PROFILE=SYSTEM
{% if self_signed_generate_pem_for_haproxy|default(false) %}
    ssl-dh-param-file {{ dhparam_path_filename }}
    ssl-default-bind-options ssl-min-ver TLSv1.2
{% endif %}

#---------------------------------------------------------------------
# common defaults that all the 'listen' and 'backend' sections will
# use if not designated in their block
#---------------------------------------------------------------------
defaults
    mode                    http
    log                     global
    option                  httplog
    option                  dontlognull
    option http-server-close
    option forwardfor       except 127.0.0.0/8
    option                  redispatch
    retries                 3
    timeout http-request    10s
    timeout queue           1m
    timeout connect         10s
    timeout client          1m
    timeout server          1m
    timeout http-keep-alive 10s
    timeout check           10s
    maxconn                 3000


#---------------------------------------------------------------------
# main frontend which proxys to the backends
#---------------------------------------------------------------------
frontend main
    bind *:80

{% if haproxy_redirect_http_to_https|default(false) %}
    http-request redirect scheme https unless { ssl_fc }
{% endif %}

    capture request header Referrer len 512
    capture request header Content-Length len 128
    capture request header User-Agent len 256
    capture request header Host len 256
    capture request header X-Forwarded-For len 512

    default_backend             app

{% if self_signed_generate_pem_for_haproxy|default(false) %}
frontend ssl_main
    bind *:443 ssl crt {{ haproxy_pem_path_filename }} alpn h2,http/1.1

    capture request header Referrer len 512
    capture request header Content-Length len 128
    capture request header User-Agent len 256
    capture request header Host len 256
    capture request header X-Forwarded-For len 512

    default_backend             app_ssl
{% endif %}

#---------------------------------------------------------------------
# round robin balancing between the various backends
#---------------------------------------------------------------------
backend app
    balance     roundrobin

{%  for i in groups["webservers"] %}
    server {{ hostvars[i]['inventory_hostname'] }} {{ hostvars[i]['ansible_host'] }}:80 check # loop iteration = {{loop.index}}
{% endfor %}

{% if self_signed_generate_pem_for_haproxy|default(false) %}
backend app_ssl
    balance     roundrobin

{%  for i in groups["webservers"] %}
    server {{ hostvars[i]['inventory_hostname'] }} {{ hostvars[i]['ansible_host'] }}:443 check ssl verify none
{% endfor %}
{% endif %}